---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '../i18n/utils';

const showresponse = null;
const isprocessing = null; 
const { directives, pagetitle, lang } = Astro.props;
 
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const url = 'https://manoamiga.nz/contact.php';

if (Astro.request.method === "POnST") {
  try {
    const formData = await Astro.request.formData();
    const nombre = formData.get("Nombre");
    const email = formData.get("Email");
    const motivo = formData.get("Motivo");
    const mensaje = formData.get("Mensaje");

    const res = await fetch(url, {
            method: 'POST',
            body: formData ,
             
        }).catch((error) => {
             
        });  
    if (res) {
            const data = await res.text(); 
            console.log(data)
        }

      }
      catch(e){
        console.log(e)
      }
    }
---

<section class="mx-4 md:mx-0">
    <h1 class="font-semibold my-2">{pagetitle}</h1>

    <article class=" bg-bgsecondary p-4">
      
          <form
          action={url}
          method="POST"
          id="contact-form"
          name="contact form" class="md:px-16 md:py-8">
            <div class="form-group">
              <label class="control-label" for="Nombre">
                {t('contact.name')}
              </label>
              <input
                type="text"
                class="form-control input-text"
                id="Nombre"
                name="Nombre"
                placeholder={t('contact.name.placeholder')}
                required
                autofocus
              />
            </div>
            <div class="form-group">
              <label class="control-label" for="Motivo">
                {t('contact.reason')}
              </label>
              <input
                type="text"
                class="form-control input-text"
                id="Motivo"
                name="Motivo"
                placeholder={t('contact.reason.placeholder')}
                required
              />
            </div>
            <div class="form-group">
              <label class="control-label" for="Correo">
                {t('contact.email')}
              </label>
              <input
                type="email"
                class="form-control input-text"
                id="Correo"
                name="Correo"
                placeholder={t('contact.email.placeholder')}
                required
              />
            </div>
            <div class="form-group">
              <label class="control-label" for="Mensaje">
                {t('contact.message')}
              </label>
              <textarea
                rows="5"
                cols="30"
                class="form-control"
                id="Mensaje"
                name="Mensaje"
                placeholder={t('contact.message.placeholder')}
                required
              />
            </div>
            <div class="form-group">
              <button type="submit"  class="btn btn-primary">
                {t('contact.send')}
              </button>
              <input type="reset" class="btn btn-default" value={t('contact.reset')} />
            </div>
            <svg
              id="form-loading"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="icon icon-tabler icons-tabler-outline icon-tabler-loader-2 hidden size-5 animate-spin"
            >
              <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
              <path d="M12 3a9 9 0 1 0 9 9"></path>
            </svg>
          </form>
         
        
  <dialog
  id="form-good-feedback"
  class="invisible fixed bottom-4 z-10 mx-auto flex rounded-lg bg-green-200 p-0 text-green-800 opacity-0 transition duration-300"
>
  <div class="p-4 text-center">
    <p>Message sent successfully. I will get back to you.</p>
  </div>
</dialog>
 
<dialog
  id="form-bad-feedback"
  class="invisible fixed bottom-4 z-10 mx-auto flex rounded-lg bg-red-200 p-0 text-red-800 opacity-0 transition duration-300"
>
  <div class="p-4 text-center">
    <p>Something went wrong. Please try again or contact me by email.</p>
  </div>
</dialog>
    </article>
  </section>

  <style>
    .contact {
      
    }
  
    .contact h1 {
      font-family: inherit;
      font-size: 2rem;
      font-weight: 500;
      line-height: 1.1;
      color: "#337ab7";
      margin-left: 2rem;
    }
  
    label {
      display: inline-block;
      max-width: 100%;
      margin-bottom: 5px;
      font-weight: 700;
      color: "#333333";
    } 
  
    .btn-primary {
      color: #fff;
      background-color: #337ab7;
      border-color: #2e6da4;
    }
  
    .btn {
      display: inline-block;
      padding: 6px 12px;
      margin-bottom: 0;
      font-size: 14px;
      font-weight: 400;
      line-height: 1.42857143;
      text-align: center;
      white-space: nowrap;
      vertical-align: middle;
      -ms-touch-action: manipulation;
      touch-action: manipulation;
      cursor: pointer;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      background-image: none;
      border: 1px solid transparent;
      border-radius: 4px;
    }
  
    .btn-default {
      color: #333;
      background-color: #fff;
      border-color: #ccc;
    }
  
    .form-group {
      margin-bottom: 15px;
    }
  
    .success {
      color: var(--primary);
      padding-bottom: 1rem;
    }
  
    .fail {
      color: var(--error);
      padding-bottom: 1rem;
    }
  </style>
  

  <script>
    // handle the form submission
    var xhr = new XMLHttpRequest();
  
    // only one contact form supported per page
    const form = document.getElementById("contact-form") as HTMLFormElement;
    const formLoadingIndicator = document.getElementById("form-loading");
    const formGoodFeedback = document.getElementById("form-good-feedback");
    const formBadFeedback = document.getElementById("form-bad-feedback");
  
    const handleFormSubmission = (event:any) => {
      // prevent page from reloading
      event.preventDefault();
  
      // show loading indicator
      formLoadingIndicator?.classList.remove("hidden");
  
      // get form data
      const formData = new FormData(form);
  
      // create POST request to the form action attribute
      xhr.open("POST", form.action, true);
  
      // make sure we receive json back
      xhr.setRequestHeader("Accept", "application/json");
  
      // SEND IT!
      xhr.send(formData);
  
      // once we get a response...
      xhr.onload = function () {
        formLoadingIndicator?.classList.add("hidden");
        const response = JSON.parse(xhr.response);
  
        if (xhr.status === 200) {
          // The request was successful
          console.log("Form submitted successfully.");
          // reset form on successful email send
          form?.reset();
  
          if (formGoodFeedback) {
            formGoodFeedback.classList.remove("invisible");
            formGoodFeedback.classList.add("opacity-100");
  
            // reset form feedback after a few seconds
            setTimeout(() => {
              formGoodFeedback.classList.remove("opacity-100");
  
              setTimeout(() => {
                formGoodFeedback.classList.add("invisible");
              }, 300);
            }, 5000);
          }
        } else {
          const message = "Form submission failed with error: " + response.error;
          console.log(message);
          // The request failed
          if (formBadFeedback) {
            formBadFeedback.classList.remove("invisible");
            formBadFeedback.classList.add("opacity-100");
  
            // reset form feedback after a few seconds
            setTimeout(() => {
              formBadFeedback.classList.remove("opacity-100");
  
              setTimeout(() => {
                formBadFeedback.classList.add("invisible");
              }, 300);
            }, 7000);
          }
        }
      };
    };
  
    form?.addEventListener("submit", handleFormSubmission, true);
  </script>